from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import os

# –¢–í–û–ô –¢–û–ö–ï–ù –ë–û–¢–ê –ò–ó BOTFATHER
BOT_TOKEN = ""

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUESTIONS = [
    {
        "question": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?",
        "answer": "–¢–æ–∫–∏–æ"
    },
    {
        "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?",
        "answer": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
    },
    {
        "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –≤ –º–∏—Ä–µ?",
        "answer": "–≠–≤–µ—Ä–µ—Å—Ç"
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?",
        "answer": "7"
    },
    {
        "question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?",
        "answer": "–ö–µ–Ω–≥—É—Ä—É"
    }
]

# –ö–æ–º–∞–Ω–¥–∞ /start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['score'] = 0
    context.user_data['current_question_index'] = 0
    context.user_data['is_awaiting_answer'] = True
    context.user_data['timer_task'] = None

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –£ —Ç–µ–±—è 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.")
    await send_next_question(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /stop - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
async def stop_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'current_question_index' in context.user_data:
        del context.user_data['current_question_index']
        if context.user_data.get('timer_task'):
            context.user_data['timer_task'].cancel()
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start.")
    else:
        await update.message.reply_text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_index = context.user_data.get('current_question_index')

    if current_index >= len(QUESTIONS):
        final_score = context.user_data['score']
        await update.message.reply_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_score} –∏–∑ {len(QUESTIONS)}. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        del context.user_data['current_question_index']
        return

    question_text = QUESTIONS[current_index]["question"]
    await update.message.reply_text(question_text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    if context.user_data.get('timer_task'):
        context.user_data['timer_task'].cancel()

    context.user_data['is_awaiting_answer'] = True
    context.user_data['timer_task'] = asyncio.create_task(
        async_timer(update, context)
    )

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
async def async_timer(update, context):
    try:
        await asyncio.sleep(15)
        
        if context.user_data.get('is_awaiting_answer'):
            await update.message.reply_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! ‚è∞ –û—Ç–≤–µ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")
            context.user_data['is_awaiting_answer'] = False
            context.user_data['current_question_index'] += 1
            await send_next_question(update, context)
            
    except asyncio.CancelledError:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'current_question_index' not in context.user_data or not context.user_data.get('is_awaiting_answer'):
        await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.")
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if context.user_data.get('timer_task'):
        context.user_data['timer_task'].cancel()
        del context.user_data['timer_task']

    current_index = context.user_data['current_question_index']
    
    correct_answer = QUESTIONS[current_index]["answer"].lower()
    user_answer = update.message.text.strip().lower()

    if user_answer == correct_answer:
        context.user_data['score'] += 1
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()} üò¢")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['is_awaiting_answer'] = False
    context.user_data['current_question_index'] += 1
    await send_next_question(update, context)
    
def main():
    print("–ë–æ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞–ø—É—â–µ–Ω...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_quiz))
    app.add_handler(CommandHandler("stop", stop_quiz))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))
    
    app.run_polling()

if __name__ == "__main__":
    main()